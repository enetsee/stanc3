  $ ../../../../../install/default/bin/stanc --print-cpp eight_schools_ncp.stan

// Code generated by Stan version 2.18.0
#include <stan/model/model_header.hpp>
namespace eight_schools_ncp_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math; 
static char* current_statement__;

class eight_schools_ncp_model : public prob_grad {

 private:
  int J;
  std::vector<double> y;
  std::vector<double> sigma;
 
 public:
  ~eight_schools_ncp_model() { }
  
  static std::string model_name() { return "eight_schools_ncp_model"; }
  
  eight_schools_ncp_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : prob_grad(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "eight_schools_ncp_model_namespace::eight_schools_ncp_model";
    (void) function__;  // dummy to suppress unused var warning
    try current_statement__ = "file eight_schools_ncp.stan, line 2, columns 2-17";
    int J;
    
    current_statement__ = "file eight_schools_ncp.stan, line 2, columns 2-17";
    J = context__.vals_i("J");
    current_statement__ = "file eight_schools_ncp.stan, line 2, columns 2-17";
    current_statement__ = "file eight_schools_ncp.stan, line 2, columns 2-17";
    check_greater_or_equal(function__, J, 0);
    current_statement__ = "file eight_schools_ncp.stan, line 3, columns 2-12";
    std::vector<double> y;
    y = std::vector<double>(J, 0);
    
    current_statement__ = "file eight_schools_ncp.stan, line 3, columns 2-12";
    for (size_t sym1__ = 0; sym1__ < length(y); sym1__++)
      {
        current_statement__ = "file eight_schools_ncp.stan, line 3, columns 2-12";
        stan::model::rvalue(y, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::nil_index_list()), "pretty printed e") =
            context__.vals_r("y");
      }
    current_statement__ = "file eight_schools_ncp.stan, line 4, columns 2-25";
    std::vector<double> sigma;
    sigma = std::vector<double>(J, 0);
    
    current_statement__ = "file eight_schools_ncp.stan, line 4, columns 2-25";
    for (size_t sym1__ = 0; sym1__ < length(sigma); sym1__++)
      {
        current_statement__ = "file eight_schools_ncp.stan, line 4, columns 2-25";
        stan::model::rvalue(sigma, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::nil_index_list()), "pretty printed e") =
            context__.vals_r("sigma");
      }
    current_statement__ = "file eight_schools_ncp.stan, line 4, columns 2-25";
    for (size_t sym1__ = 0; sym1__ < length(sigma); sym1__++)
      {
        current_statement__ = "file eight_schools_ncp.stan, line 4, columns 2-25";
        current_statement__ = "file eight_schools_ncp.stan, line 4, columns 2-25";
        check_greater_or_equal(function__,
                               stan::model::rvalue(sigma, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::nil_index_list()), "pretty printed e"),
                               0);
      } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what(), current_statement__));
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) {
  typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // dummy to suppress unused var warning
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      current_statement__ = "file eight_schools_ncp.stan, line 8, columns 2-10";
      local_scalar_t__ mu;
      
      current_statement__ = "file eight_schools_ncp.stan, line 8, columns 2-10";
      mu = context__.vals_r("mu");
      current_statement__ = "file eight_schools_ncp.stan, line 9, columns 2-20";
      local_scalar_t__ tau;
      
      current_statement__ = "file eight_schools_ncp.stan, line 9, columns 2-20";
      tau = real_lb_constrain(context__.vals_r("tau"), 0);
      current_statement__ = "file eight_schools_ncp.stan, line 10, columns 2-22";
      std::vector<local_scalar_t__> theta_tilde;
      theta_tilde = std::vector<local_scalar_t__>(J, 0);
      
      current_statement__ = "file eight_schools_ncp.stan, line 10, columns 2-22";
      for (size_t sym1__ = 0; sym1__ < length(theta_tilde); sym1__++)
        {
          current_statement__ = "file eight_schools_ncp.stan, line 10, columns 2-22";
          stan::model::rvalue(theta_tilde, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::nil_index_list()), "pretty printed e") =
              context__.vals_r("theta_tilde");
        }
      current_statement__ = "file eight_schools_ncp.stan, line 14, columns 2-16";
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(J, 0);
      
      current_statement__ = "file eight_schools_ncp.stan, line 15, column 2 to line 16, column 41";
      for (size_t j = 1; j < J; j++)
        current_statement__ = "file eight_schools_ncp.stan, line 16, columns 4-41";
        stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), "pretty printed e") =
            (mu + (tau * stan::model::rvalue(theta_tilde, stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), "pretty printed e")));
      {
        current_statement__ = "file eight_schools_ncp.stan, line 20, columns 2-20";
        lp_accum__.add(normal(mu, 0, 5, pstream__))
        current_statement__ = "file eight_schools_ncp.stan, line 21, columns 2-21";
        lp_accum__.add(cauchy(tau, 0, 5, pstream__))
        current_statement__ = "file eight_schools_ncp.stan, line 22, columns 2-29";
        lp_accum__.add(normal(theta_tilde, 0, 1, pstream__))
        current_statement__ = "file eight_schools_ncp.stan, line 23, columns 2-27";
        lp_accum__.add(normal(y, theta, sigma, pstream__))
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what(), current_statement__));
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  void get_param_names(std::vector<std::string>& names) const {
    names.push_back("mu");
    names.push_back("tau");
    names.push_back("theta_tilde");
    names.push_back("theta");
  }
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(J);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(J);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
  }
  //TODO write_array
  //TODO constrained_param_names
  //TODO unconstrained_param_names
  //TODO transform_inits
}
}
typedef eight_schools_ncp_modelnamespace::eight_schools_ncp_model stan_model;

  $ ../../../../../install/default/bin/stanc --print-cpp one_var_per_block.stan

// Code generated by Stan version 2.18.0
#include <stan/model/model_header.hpp>
namespace one_var_per_block_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math; 
static char* current_statement__;
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
udf1(const T0__& a, const T1__& b, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__,
          T1__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = "file one_var_per_block.stan, line 2, columns 30-43";
    return (a + b);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF udf1") + ": " + e.what(), current_statement__));
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
}

class one_var_per_block_model : public prob_grad {

 private:
  int N;
  int K;
  std::vector<Eigen::Matrix<double, -1, 1>> datavar;
 
 public:
  ~one_var_per_block_model() { }
  
  static std::string model_name() { return "one_var_per_block_model"; }
  
  one_var_per_block_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : prob_grad(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "one_var_per_block_model_namespace::one_var_per_block_model";
    (void) function__;  // dummy to suppress unused var warning
    try current_statement__ = "file one_var_per_block.stan, line 5, columns 2-8";
    int N;
    
    current_statement__ = "file one_var_per_block.stan, line 5, columns 2-8";
    N = context__.vals_i("N");
    current_statement__ = "file one_var_per_block.stan, line 6, columns 2-8";
    int K;
    
    current_statement__ = "file one_var_per_block.stan, line 6, columns 2-8";
    K = context__.vals_i("K");
    current_statement__ = "file one_var_per_block.stan, line 7, columns 2-32";
    std::vector<Eigen::Matrix<double, -1, 1>> datavar;
    datavar = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N));
    
    current_statement__ = "file one_var_per_block.stan, line 7, columns 2-32";
    for (size_t sym1__ = 0; sym1__ < length(datavar); sym1__++)
      {
        current_statement__ = "file one_var_per_block.stan, line 7, columns 2-32";
        for (size_t sym2__ = 0;
             sym2__ < length(stan::model::rvalue(datavar, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::nil_index_list()), "pretty printed e"));
             sym2__++)
          {
            current_statement__ = "file one_var_per_block.stan, line 7, columns 2-32";
            stan::model::rvalue(datavar, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::cons_list(stan::model::index_uni(sym2__), stan::model::nil_index_list())), "pretty printed e") =
                context__.vals_r("datavar");
          }
      }
    current_statement__ = "file one_var_per_block.stan, line 7, columns 2-32";
    for (size_t sym1__ = 0; sym1__ < length(datavar); sym1__++)
      {
        current_statement__ = "file one_var_per_block.stan, line 7, columns 2-32";
        for (size_t sym2__ = 0;
             sym2__ < length(stan::model::rvalue(datavar, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::nil_index_list()), "pretty printed e"));
             sym2__++)
          {
            current_statement__ = "file one_var_per_block.stan, line 7, columns 2-32";
            current_statement__ = "file one_var_per_block.stan, line 7, columns 2-32";
            check_greater_or_equal(function__,
                                   stan::model::rvalue(datavar, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::cons_list(stan::model::index_uni(sym2__), stan::model::nil_index_list())), "pretty printed e"),
                                   0);
          }
      }
    current_statement__ = "file one_var_per_block.stan, line 10, columns 2-41";
    std::vector<std::vector<double>> tdatavar;
    tdatavar = std::vector<std::vector<double>>(1, std::vector<double>(1, 0));
    
    current_statement__ = "file one_var_per_block.stan, line 10, columns 2-41";
    tdatavar = {{2.0}};
    current_statement__ = "file one_var_per_block.stan, line 10, columns 2-41";
    for (size_t sym1__ = 0; sym1__ < length(tdatavar); sym1__++)
      {
        current_statement__ = "file one_var_per_block.stan, line 10, columns 2-41";
        for (size_t sym2__ = 0;
             sym2__ < length(stan::model::rvalue(tdatavar, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::nil_index_list()), "pretty printed e"));
             sym2__++)
          {
            current_statement__ = "file one_var_per_block.stan, line 10, columns 2-41";
            current_statement__ = "file one_var_per_block.stan, line 10, columns 2-41";
            check_greater_or_equal(function__,
                                   stan::model::rvalue(tdatavar, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::cons_list(stan::model::index_uni(sym2__), stan::model::nil_index_list())), "pretty printed e"),
                                   0);
          }
      } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what(), current_statement__));
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) {
  typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // dummy to suppress unused var warning
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      current_statement__ = "file one_var_per_block.stan, line 13, columns 2-30";
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> param;
      param = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      current_statement__ = "file one_var_per_block.stan, line 13, columns 2-30";
      for (size_t sym1__ = 0; sym1__ < length(param); sym1__++)
        {
          current_statement__ = "file one_var_per_block.stan, line 13, columns 2-30";
          stan::model::rvalue(param, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::nil_index_list()), "pretty printed e") =
              real_lb_constrain(context__.vals_r("param"), 0);
        }
      current_statement__ = "file one_var_per_block.stan, line 14, columns 2-39";
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> matparam;
      matparam = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>((K + 1), std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, Eigen::Matrix<local_scalar_t__, -1, -1>(N, N)));
      
      current_statement__ = "file one_var_per_block.stan, line 14, columns 2-39";
      for (size_t sym1__ = 0; sym1__ < length(matparam); sym1__++)
        {
          current_statement__ = "file one_var_per_block.stan, line 14, columns 2-39";
          for (size_t sym2__ = 0;
               sym2__ < length(stan::model::rvalue(matparam, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::nil_index_list()), "pretty printed e"));
               sym2__++)
            {
              current_statement__ = "file one_var_per_block.stan, line 14, columns 2-39";
              stan::model::rvalue(matparam, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::cons_list(stan::model::index_uni(sym2__), stan::model::nil_index_list())), "pretty printed e") =
                  real_lb_constrain(context__.vals_r("matparam"), 0);
            }
        }
      current_statement__ = "file one_var_per_block.stan, line 17, columns 2-31";
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tparam;
      tparam = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      current_statement__ = "file one_var_per_block.stan, line 17, columns 2-31";
      for (size_t sym1__ = 0; sym1__ < length(tparam); sym1__++)
        {
          current_statement__ = "file one_var_per_block.stan, line 17, columns 2-31";
          for (size_t sym2__ = 0;
               sym2__ < length(stan::model::rvalue(tparam, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::nil_index_list()), "pretty printed e"));
               sym2__++)
            {
              current_statement__ = "file one_var_per_block.stan, line 17, columns 2-31";
              current_statement__ = "file one_var_per_block.stan, line 17, columns 2-31";
              check_greater_or_equal(function__,
                                     stan::model::rvalue(tparam, stan::model::cons_list(stan::model::index_uni(sym1__), stan::model::cons_list(stan::model::index_uni(sym2__), stan::model::nil_index_list())), "pretty printed e"),
                                     0);
            }
        }
      current_statement__ = "file one_var_per_block.stan, line 18, columns 2-42";
      for (size_t n = 1; n < N; n++)
        current_statement__ = "file one_var_per_block.stan, line 18, columns 17-42";
        stan::model::rvalue(tparam, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "pretty printed e") =
            multiply(stan::model::rvalue(param, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "pretty printed e"), 2);
      {
        current_statement__ = "file one_var_per_block.stan, line 21, columns 2-26";
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> modellocal;
        modellocal = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
        
        current_statement__ = "file one_var_per_block.stan, line 22, columns 2-47";
        for (size_t n = 1; n < N; n++)
          current_statement__ = "file one_var_per_block.stan, line 22, columns 17-47";
          stan::model::rvalue(modellocal, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "pretty printed e") =
              multiply(stan::model::rvalue(tparam, stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), "pretty printed e"), 2);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what(), current_statement__));
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  void get_param_names(std::vector<std::string>& names) const {
    names.push_back("param");
    names.push_back("matparam");
    names.push_back("tparam");
    names.push_back("gq");
  }
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back((K + 1));
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
  }
  //TODO write_array
  //TODO constrained_param_names
  //TODO unconstrained_param_names
  //TODO transform_inits
}
}
typedef one_var_per_block_modelnamespace::one_var_per_block_model stan_model;

